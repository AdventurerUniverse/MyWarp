subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    // Basic project information
    group = 'me.taylorkelly'
    version = '3.0-SNAPSHOT'

    // Extended project information
    ext.projectName = 'MyWarp'
    ext.inceptionYear = '2011'
    ext.packaging = 'jar'
    ext.url = 'https://thee.github.io/MyWarp/'
    ext.projectDescription = 'Social and dynamic warps for Minecraft'

    // Define variables
    ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
    ext.ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
    ext.commit = project.hasProperty("commit") ? commit : 'unknown'

    ext.internalVersion = version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit

    // Minimum version of Java required
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    // Project repositories
    repositories {
        mavenCentral()
    }

    checkstyle {
        toolVersion = '6.1'

        configProperties.checkstyleConfigDir = new File(rootProject.projectDir, 'config/checkstyle')
        configFile = new File(configProperties.checkstyleConfigDir, 'checkstyle.xml')
    }

    // JAR manifest configuration
    jar.manifest.mainAttributes(
            "Built-By": System.properties['user.name'],
            "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
            "Implementation-Title": name,
            "Implementation-Version": internalVersion,
            "Implementation-Vendor": url)

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc {
        options.setEncoding('UTF-8')
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    build.dependsOn(checkstyleMain)
    build.dependsOn(checkstyleTest)
    build.dependsOn(sourcesJar)
    build.dependsOn(javadocJar)
}
